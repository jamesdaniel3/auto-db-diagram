name: Ubuntu MySQL System Tests
on:
  workflow_call:
    inputs:
      os-matrix:
        description: 'OS matrix configuration as JSON string'
        required: true
        type: string
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include: ${{ fromJson(inputs.os-matrix) }}

    env:
      DB_DATABASE: testdb
      DB_USER: root
      DB_PASSWORD: root

    steps:
      - name: Debug runner specs
        run: |
          echo "Runner: ${{ runner.os }} ${{ runner.arch }}"
          echo "Matrix OS: ${{ matrix.os }}"
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
          echo "Processor: $(cat /proc/cpuinfo | grep 'model name' | head -1 | cut -d: -f2 | xargs)"
          echo "Architecture: $(uname -m)"
          echo "Ubuntu version: $(lsb_release -d | cut -f2)"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install additional dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq graphviz

      - name: Set up MySQL
        run: |
          # Start MySQL service using init.d (as suggested in the article)
          sudo /etc/init.d/mysql start

          # Wait a moment for MySQL to start
          sleep 5

          # Test connection and create database
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}

          # Create test user
          mysql -e "CREATE USER 'testuser'@'localhost' IDENTIFIED BY 'testpassword';" -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
          mysql -e "GRANT ALL PRIVILEGES ON ${{ env.DB_DATABASE }}.* TO 'testuser'@'localhost';" -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
          mysql -e "FLUSH PRIVILEGES;" -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}

      - name: Create test database schema
        run: |
          # Create tables with foreign key relationship
          mysql -h localhost -u testuser -ptestpassword ${{ env.DB_DATABASE }} << 'EOF'
          -- Create users table (parent)
          CREATE TABLE users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            username VARCHAR(50) NOT NULL UNIQUE,
            email VARCHAR(100) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          -- Create posts table (child with foreign key)
          CREATE TABLE posts (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            title VARCHAR(200) NOT NULL,
            content TEXT,
            published BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
          );

          -- Insert some sample data
          INSERT INTO users (username, email) VALUES 
            ('john_doe', 'john@example.com'),
            ('jane_smith', 'jane@example.com');

          INSERT INTO posts (user_id, title, content, published) VALUES 
            (1, 'First Post', 'This is the first post content', TRUE),
            (1, 'Second Post', 'This is the second post content', FALSE),
            (2, 'Jane''s Post', 'Content from Jane', TRUE);
          EOF

      - name: Create credentials file
        run: |
          cat > credentials.json << 'EOF'
          {
            "DATABASE_TYPE": "mysql",
            "CONNECTION_INFO": {
              "HOST": "localhost",
              "PORT": 3306,
              "USERNAME": "testuser",
              "DATABASE_NAME": "testdb",
              "PASSWORD": "testpassword"
            }
          }
          EOF

      - name: Run script with database credentials
        run: |
          echo "Running on Ubuntu ${{ matrix.os }} (${{ runner.arch }})"
          chmod +x main.sh
          ./main.sh --headless credentials.json

      - name: Verify PNG file was generated
        run: |
          # Look for PNG files in common output locations
          if ls *.png 1> /dev/null 2>&1; then
            echo "PNG file(s) found in current directory:"
            ls -la *.png
          elif find . -name "*.png" -type f | head -1; then
            echo "PNG file(s) found:"
            find . -name "*.png" -type f -exec ls -la {} \;
          else
            echo "No PNG files found!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi

      - name: Stop MySQL (cleanup)
        if: always()
        run: |
          sudo /etc/init.d/mysql stop || true
