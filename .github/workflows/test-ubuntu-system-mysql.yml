name: Ubuntu MySQL system tests
on:
  pull_request:
    branches: [main]
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            mysql_version: "8.0"
            arch: x64

          - os: ubuntu-22.04
            mysql_version: "8.0"
            arch: x64
    steps:
      - name: Debug runner specs
        run: |
          echo "Runner: ${{ runner.os }} ${{ runner.arch }}"
          echo "Matrix OS: ${{ matrix.os }}"
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
          echo "Processor: $(cat /proc/cpuinfo | grep 'model name' | head -1 | cut -d: -f2 | xargs)"
          echo "Architecture: $(uname -m)"
          echo "Ubuntu version: $(lsb_release -d | cut -f2)"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update package lists
        run: |
          sudo apt-get update

      - name: Install dependencies
        run: |
          sudo apt-get install -y jq graphviz mysql-server mysql-client

      - name: Start MySQL service
        run: |
          sudo systemctl start mysql
          sudo systemctl enable mysql

      - name: Find MySQL temporary password
        run: |
          echo "Checking MySQL error log for temporary password..."

          # Common locations for MySQL error log on Ubuntu
          if [ -f /var/log/mysql/error.log ]; then
            echo "Found error log at /var/log/mysql/error.log"
            sudo cat /var/log/mysql/error.log
          elif [ -f /var/log/mysqld.log ]; then
            echo "Found error log at /var/log/mysqld.log"
            sudo cat /var/log/mysqld.log
          elif [ -f /var/lib/mysql/$(hostname).err ]; then
            echo "Found error log at /var/lib/mysql/$(hostname).err"
            sudo cat /var/lib/mysql/$(hostname).err
          else
            echo "Searching for MySQL error logs..."
            sudo find /var -name "*.err" -o -name "*mysql*.log" 2>/dev/null | head -10
            
            echo "Checking MySQL configuration for log location..."
            sudo mysql --help --verbose | grep -A 1 "log-error"
            
            echo "Checking systemd journal for MySQL messages..."
            sudo journalctl -u mysql --no-pager | tail -20
          fi

          echo "Looking specifically for 'temporary password' or 'generated' in logs..."
          sudo grep -r "temporary password\|generated.*password" /var/log/ 2>/dev/null || echo "No temporary password found in logs"

      - name: Setup MySQL user and database
        run: |
          # Try to extract the temporary password
          TEMP_PASS=""
          if sudo grep -q "temporary password" /var/log/mysql/error.log 2>/dev/null; then
            TEMP_PASS=$(sudo grep "temporary password" /var/log/mysql/error.log | tail -1 | awk '{print $NF}')
            echo "Found temporary password: $TEMP_PASS"
          elif sudo grep -q "generated.*password" /var/log/mysql/error.log 2>/dev/null; then
            TEMP_PASS=$(sudo grep "generated.*password" /var/log/mysql/error.log | tail -1 | awk '{print $NF}')
            echo "Found generated password: $TEMP_PASS"
          fi

          if [ -n "$TEMP_PASS" ]; then
            echo "Using temporary password to set up MySQL"
            mysql -u root -p"$TEMP_PASS" --connect-expired-password << 'EOF'
            ALTER USER 'root'@'localhost' IDENTIFIED BY 'rootpassword';
            EOF
            
            # Now use the new password for the rest
            mysql -u root -prootpassword << 'EOF'
            CREATE USER 'testuser'@'localhost' IDENTIFIED BY 'testpassword';
            CREATE DATABASE testdb;
            GRANT ALL PRIVILEGES ON testdb.* TO 'testuser'@'localhost';
            FLUSH PRIVILEGES;
            EOF
          else
            echo "No temporary password found, falling back to sudo method"
            sudo mysql << 'EOF'
            ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'rootpassword';
            CREATE USER 'testuser'@'localhost' IDENTIFIED BY 'testpassword';
            CREATE DATABASE testdb;
            GRANT ALL PRIVILEGES ON testdb.* TO 'testuser'@'localhost';
            FLUSH PRIVILEGES;
            EOF
          fi

      - name: Create test database schema
        run: |
          # Create tables with foreign key relationship
          mysql -h localhost -u testuser -ptestpassword testdb << 'EOF'
          -- Create users table (parent)
          CREATE TABLE users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            username VARCHAR(50) NOT NULL UNIQUE,
            email VARCHAR(100) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          -- Create posts table (child with foreign key)
          CREATE TABLE posts (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            title VARCHAR(200) NOT NULL,
            content TEXT,
            published BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
          );

          -- Insert some sample data
          INSERT INTO users (username, email) VALUES 
            ('john_doe', 'john@example.com'),
            ('jane_smith', 'jane@example.com');

          INSERT INTO posts (user_id, title, content, published) VALUES 
            (1, 'First Post', 'This is the first post content', TRUE),
            (1, 'Second Post', 'This is the second post content', FALSE),
            (2, 'Jane''s Post', 'Content from Jane', TRUE);
          EOF

      - name: Create credentials file
        run: |
          cat > credentials.json << 'EOF'
          {
            "DATABASE_TYPE": "mysql",
            "CONNECTION_INFO": {
              "HOST": "localhost",
              "PORT": 3306,
              "USERNAME": "testuser",
              "DATABASE_NAME": "testdb",
              "PASSWORD": "testpassword"
            }
          }
          EOF

      - name: Run script with database credentials
        run: |
          echo "Running on Ubuntu ${{ matrix.os }} (${{ runner.arch }})"
          chmod +x main.sh
          ./main.sh --headless credentials.json

      - name: Verify PNG file was generated
        run: |
          # Look for PNG files in common output locations
          if ls *.png 1> /dev/null 2>&1; then
            echo "PNG file(s) found in current directory:"
            ls -la *.png
          elif find . -name "*.png" -type f | head -1; then
            echo "PNG file(s) found:"
            find . -name "*.png" -type f -exec ls -la {} \;
          else
            echo "No PNG files found!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi

      # removed to avoid paying for storage
      # - name: Upload generated diagram as artifact
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: db-diagram-mysql-${{ matrix.os }}-${{ matrix.mysql_version }}
      #     path: |
      #       *.png
      #       **/*.png
      #     if-no-files-found: warn

      - name: Stop MySQL (cleanup)
        if: always()
        run: |
          sudo systemctl stop mysql || true
