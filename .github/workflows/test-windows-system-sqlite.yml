name: Windows SQLIte System Tests
on:
  workflow_call:
    inputs:
      os-matrix:
        description: 'OS matrix configuration as JSON string'
        required: true
        type: string
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include: ${{ fromJson(inputs.os-matrix) }}
    steps:
      - name: Debug runner specs
        shell: pwsh
        run: |
          Write-Host "Runner: ${{ runner.os }} ${{ runner.arch }}"
          Write-Host "Matrix OS: ${{ matrix.os }}"
          Write-Host "CPU cores: $((Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors)"
          Write-Host "Memory: $([math]::Round((Get-CimInstance Win32_ComputerSystem).TotalPhysicalMemory/1GB, 2)) GB"
          Write-Host "Processor: $((Get-CimInstance Win32_Processor).Name)"
          Write-Host "Architecture: $env:PROCESSOR_ARCHITECTURE"
          Write-Host "Windows Version: $((Get-CimInstance Win32_OperatingSystem).Version)"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        shell: pwsh
        run: |
          # Install Chocolatey if not present
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          
          choco install jq graphviz sqlite -y --no-progress
          
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
          
          sqlite3 --version

      - name: Create test SQLite database
        shell: pwsh
        run: |
          # Create SQLite database with test schema
          $sqlScript = @"
          -- Create users table (parent)
          CREATE TABLE users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL UNIQUE,
            email TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
          );

          -- Create posts table (child with foreign key)
          CREATE TABLE posts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            content TEXT,
            published BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
          );

          -- Create categories table for additional complexity
          CREATE TABLE categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            description TEXT
          );

          -- Create many-to-many relationship table
          CREATE TABLE post_categories (
            post_id INTEGER NOT NULL,
            category_id INTEGER NOT NULL,
            PRIMARY KEY (post_id, category_id),
            FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
            FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
          );

          -- Insert sample data
          INSERT INTO users (username, email) VALUES 
            ('john_doe', 'john@example.com'),
            ('jane_smith', 'jane@example.com'),
            ('bob_wilson', 'bob@example.com');

          INSERT INTO categories (name, description) VALUES
            ('Technology', 'Posts about technology and programming'),
            ('Lifestyle', 'Posts about daily life and experiences'),
            ('Tutorial', 'How-to guides and tutorials');

          INSERT INTO posts (user_id, title, content, published) VALUES 
            (1, 'First Post', 'This is the first post content', 1),
            (1, 'Second Post', 'This is the second post content', 0),
            (2, 'Jane''s Post', 'Content from Jane', 1),
            (3, 'Bob''s Tutorial', 'How to use SQLite effectively', 1);

          INSERT INTO post_categories (post_id, category_id) VALUES
            (1, 1),  -- First Post -> Technology
            (2, 2),  -- Second Post -> Lifestyle  
            (3, 2),  -- Jane's Post -> Lifestyle
            (4, 1),  -- Bob's Tutorial -> Technology
            (4, 3);  -- Bob's Tutorial -> Tutorial

          -- Create indexes for better performance demonstration
          CREATE INDEX idx_posts_user_id ON posts(user_id);
          CREATE INDEX idx_posts_published ON posts(published);
          CREATE INDEX idx_users_username ON users(username);

          -- Create a view to test view handling
          CREATE VIEW published_posts AS
          SELECT 
            p.id,
            p.title,
            p.content,
            u.username,
            u.email,
            p.created_at
          FROM posts p
          JOIN users u ON p.user_id = u.id
          WHERE p.published = 1;
"@

          # Write SQL script to file
          $sqlScript | Out-File -FilePath "create_test_db.sql" -Encoding UTF8

          # Create the database
          sqlite3 testdb.sqlite ".read create_test_db.sql"

          # Verify database was created successfully
          Write-Host "Database created. Tables:"
          sqlite3 testdb.sqlite ".tables"